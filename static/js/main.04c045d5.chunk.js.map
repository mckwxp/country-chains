{"version":3,"sources":["components/Info.js","components/Form.js","components/Result.js","components/StartPage.js","components/EndPage.js","components/Map.js","App.js","reportWebVitals.js","index.js"],"names":["Info","props","id","msg","className","score","Form","useState","name","setName","onSubmit","e","preventDefault","countryName","trim","addCountry","autoComplete","type","value","onChange","target","onClick","setPage","pages","END","Result","countries","map","c","i","nanoid","slice","reverse","StartPage","onValueChange","setPlayers","parseInt","GAME","setMsg","checked","players","EndPage","useEffect","setCountries","Map","latlongData","require","findLatLong","x","countryArr","filter","country","toLowerCase","length","LocationMarker","colors","CircleMarker","center","latitude","longitude","pathOptions","color","fillOpacity","radius","Tooltip","Lines","pos","Polyline","positions","CurrentLocation","LayersControl","position","collapsed","Overlay","Marker","MapContainer","zoom","TileLayer","attribution","url","App","myjson","synonyms","searchResults","find","checkCountry","includes","checkSynonyms","first","second","neighbours","checkNeighbours","checkNeighbourExists","page","START","Set","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04c045d5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Info(props) {\r\n    return (\r\n        <div id=\"Info\">\r\n            <div>{props.msg}</div>\r\n            <div>\r\n                <div className=\"score\">Countries: {props.score[0]}</div>\r\n                <div className=\"score\">Unique: {props.score[1]}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Info;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction Form(props) {\r\n    const [name, setName] = useState(\"\");\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        const countryName = name.trim();\r\n        if (countryName !== \"\") {\r\n            if (props.addCountry(countryName)) {\r\n                setName(\"\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleChange(e) {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    function handleClick() {\r\n        props.setPage(props.pages.END);\r\n    }\r\n\r\n    return (\r\n        <div id=\"Form\">\r\n            <form onSubmit={handleSubmit} autoComplete=\"off\">\r\n                <p>Enter a country name:</p>\r\n                <input\r\n                    type=\"text\"\r\n                    autoComplete=\"off\"\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                />\r\n                <button type=\"submit\">Chain it!</button>\r\n            </form>\r\n            <div>\r\n                <button type=\"button\" onClick={handleClick}>\r\n                    Finish\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nfunction Result(props) {\r\n    // converts the country list to a list\r\n    // reverse the list so that most recent one is on top\r\n    const countries = props.countries\r\n        .map((c, i) => {\r\n            return <li key={\"id-\" + nanoid()}>{c}</li>;\r\n        })\r\n        .slice(0)\r\n        .reverse();\r\n\r\n    return (\r\n        <div id=\"Result\">\r\n            <ul>{countries}</ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Result;\r\n","import React from \"react\";\r\n\r\nfunction StartPage(props) {\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        props.setPage(props.pages.GAME);\r\n        props.setMsg(\"Let's begin!\");\r\n    }\r\n    function onValueChange(e) {\r\n        props.setPlayers(parseInt(e.target.value));\r\n    }\r\n    return (\r\n        <div id=\"StartPage\">\r\n            <p>\r\n                In this game, you will create a chain of <br /> neighbouring\r\n                countries.\r\n            </p>\r\n            <form onSubmit={handleSubmit}>\r\n                Select the number of players:\r\n                <div>\r\n                    <label>\r\n                        <input\r\n                            type=\"radio\"\r\n                            id=\"numPlayers1\"\r\n                            value={1}\r\n                            checked={props.players === 1}\r\n                            onChange={onValueChange}\r\n                        />\r\n                        1\r\n                    </label>\r\n                    <label>\r\n                        <input\r\n                            type=\"radio\"\r\n                            id=\"numPlayers2\"\r\n                            value={2}\r\n                            checked={props.players === 2}\r\n                            onChange={onValueChange}\r\n                        />\r\n                        2\r\n                    </label>\r\n                    <label>\r\n                        <input\r\n                            type=\"radio\"\r\n                            id=\"numPlayers3\"\r\n                            value={3}\r\n                            checked={props.players === 3}\r\n                            onChange={onValueChange}\r\n                        />\r\n                        3\r\n                    </label>\r\n                    <label>\r\n                        <input\r\n                            type=\"radio\"\r\n                            id=\"numPlayers4\"\r\n                            value={4}\r\n                            checked={props.players === 4}\r\n                            onChange={onValueChange}\r\n                        />\r\n                        4\r\n                    </label>\r\n                </div>\r\n                <button type=\"submit\">Play now!</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StartPage;\r\n","import React, { useEffect } from \"react\";\r\n\r\nfunction EndPage(props) {\r\n    useEffect(() => props.setMsg(\"Your score is:\"));\r\n    function handleClick() {\r\n        props.setPage(props.pages.GAME);\r\n        props.setMsg(\"Let's begin!\");\r\n        props.setCountries([]);\r\n    }\r\n    return (\r\n        <div id=\"EndPage\">\r\n            <p>Thanks for playing!</p>\r\n            <button type=\"button\" className=\"btn\" onClick={handleClick}>\r\n                Play again!\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EndPage;\r\n","import React from \"react\";\r\nimport {\r\n    MapContainer,\r\n    TileLayer,\r\n    CircleMarker,\r\n    Tooltip,\r\n    Polyline,\r\n    Marker,\r\n    LayersControl,\r\n} from \"react-leaflet\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nfunction Map(props) {\r\n    const latlongData = require(\"../countries_latlong.json\");\r\n\r\n    function findLatLong(x) {\r\n        // get lat/long data from country name\r\n        let countryArr = latlongData.filter(\r\n            (c) => c.country.toLowerCase() === x.toLowerCase()\r\n        );\r\n\r\n        return countryArr.length !== 0 ? countryArr[0] : null;\r\n    }\r\n\r\n    function LocationMarker() {\r\n        let colors = [\"green\", \"red\", \"blue\", \"orange\"];\r\n\r\n        // add circle markers for each country\r\n        return props.countries.map((x, i) => {\r\n            let country = findLatLong(x);\r\n\r\n            return country ? (\r\n                <CircleMarker\r\n                    center={[country.latitude, country.longitude]}\r\n                    pathOptions={{\r\n                        color: colors[i % props.players],\r\n                        fillOpacity: 1,\r\n                    }}\r\n                    radius={5}\r\n                    key={\"id-\" + nanoid()}\r\n                >\r\n                    <Tooltip>{country.country}</Tooltip>\r\n                </CircleMarker>\r\n            ) : null;\r\n        });\r\n    }\r\n\r\n    function Lines() {\r\n        // add lines to connect the circle markers\r\n        let pos = props.countries\r\n            .map((x, i) => {\r\n                let country = findLatLong(x);\r\n\r\n                return country ? [country.latitude, country.longitude] : null;\r\n            })\r\n            .filter((c) => c !== null);\r\n\r\n        return pos.length !== 0 ? <Polyline positions={pos} /> : null;\r\n    }\r\n\r\n    function CurrentLocation() {\r\n        if (props.countries.length > 0) {\r\n            let country = findLatLong(\r\n                props.countries[props.countries.length - 1]\r\n            );\r\n            if (country) {\r\n                return (\r\n                    <LayersControl position=\"topright\" collapsed={false}>\r\n                        <LayersControl.Overlay\r\n                            name=\"Current Location\"\r\n                            checked={true}\r\n                        >\r\n                            <Marker\r\n                                position={[country.latitude, country.longitude]}\r\n                            ></Marker>\r\n                        </LayersControl.Overlay>\r\n                    </LayersControl>\r\n                );\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <MapContainer center={[25, 0]} zoom={2} id=\"Map\">\r\n            <TileLayer\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://c.tiles.wmflabs.org/osm-no-labels/{z}/{x}/{y}.png\"\r\n            />\r\n            <LocationMarker />\r\n            <Lines />\r\n            <CurrentLocation />\r\n        </MapContainer>\r\n    );\r\n}\r\n\r\nexport default Map;\r\n","import \"./App.css\";\r\nimport React, { useState } from \"react\";\r\nimport Info from \"./components/Info.js\";\r\nimport Form from \"./components/Form.js\";\r\nimport Result from \"./components/Result.js\";\r\nimport StartPage from \"./components/StartPage.js\";\r\nimport EndPage from \"./components/EndPage.js\";\r\nimport Map from \"./components/Map.js\";\r\n\r\nfunction App() {\r\n    // Data for country neighbours\r\n    const myjson = require(\"./countries_maritime.json\");\r\n\r\n    // Checks if the second country is a neighbour of the first country\r\n    function checkNeighbours(first, second) {\r\n        const searchResults = myjson.find(\r\n            (c) => c.country.toLowerCase() === first.toLowerCase()\r\n        );\r\n\r\n        if (searchResults) {\r\n            let filteredNeighbours = searchResults.neighbours.filter(\r\n                (x) => x.toLowerCase() === second.toLowerCase()\r\n            );\r\n            if (filteredNeighbours.length !== 0) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Checks if a country has a neighbour\r\n    function checkNeighbourExists(country) {\r\n        const searchResults = myjson.find(\r\n            (c) => c.country.toLowerCase() === country.toLowerCase()\r\n        );\r\n        return searchResults ? searchResults.neighbours.length !== 0 : false;\r\n    }\r\n\r\n    // Checks if a country is in the data object\r\n    function checkCountry(country) {\r\n        const searchResults = myjson.find(\r\n            (c) => c.country.toLowerCase() === country.toLowerCase()\r\n        );\r\n        return searchResults ? searchResults.country : false;\r\n    }\r\n\r\n    // Data for country name synonyms\r\n    const synonyms = require(\"./countries_synonyms.json\");\r\n\r\n    // Checks for synonym of country names\r\n    function checkSynonyms(country) {\r\n        const searchResults = synonyms.find((c) =>\r\n            c.synonyms\r\n                .map((x) => x.toLowerCase())\r\n                .includes(country.toLowerCase())\r\n        );\r\n        return searchResults ? searchResults.country : country;\r\n    }\r\n\r\n    // State for messsage panel\r\n    const [msg, setMsg] = useState(\"Welcome to the game!\");\r\n\r\n    // State for results panel; contains an array of countries\r\n    const [countries, setCountries] = useState([]);\r\n\r\n    // State for number of players\r\n    const [players, setPlayers] = useState(1);\r\n\r\n    // Core logic to check if the entered country is a neighbour of the most recent one\r\n    // Sets message panel and results panel accordingly\r\n    // Returns Boolean to indicate if country is successfully added to the array\r\n    function addCountry(countryName) {\r\n        // check for synonyms and coutnry name validity\r\n        countryName = checkSynonyms(countryName);\r\n        countryName = checkCountry(countryName);\r\n\r\n        if (!countryName) {\r\n            setMsg(`This is not a valid country.`);\r\n            return false;\r\n        } else {\r\n            // array already populated; not the first added country\r\n            if (countries.length > 0) {\r\n                if (\r\n                    checkNeighbours(\r\n                        countries[countries.length - 1],\r\n                        countryName\r\n                    )\r\n                ) {\r\n                    setCountries([...countries, countryName]);\r\n                    setMsg(\"Well done! Keep going!\");\r\n                    return true;\r\n                } else {\r\n                    setMsg(\r\n                        `${countryName} is not a neighbour of ${\r\n                            countries[countries.length - 1]\r\n                        }.`\r\n                    );\r\n                    return false;\r\n                }\r\n            } else {\r\n                // first added country\r\n                if (checkNeighbourExists(countryName)) {\r\n                    setCountries([countryName]);\r\n                    setMsg(\"Great start!\");\r\n                    return true;\r\n                } else {\r\n                    setMsg(\r\n                        \"This country does not have any neighbours. Please name another one.\"\r\n                    );\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const [page, setPage] = useState(0);\r\n    const pages = { START: 0, GAME: 1, END: 2 };\r\n\r\n    function Main() {\r\n        if (page === pages.START) {\r\n            return (\r\n                <StartPage\r\n                    setPage={setPage}\r\n                    pages={pages}\r\n                    setMsg={setMsg}\r\n                    players={players}\r\n                    setPlayers={setPlayers}\r\n                />\r\n            );\r\n        } else if (page === pages.GAME) {\r\n            return (\r\n                <div id=\"main-container\">\r\n                    <div id=\"game\">\r\n                        <Form\r\n                            addCountry={addCountry}\r\n                            setPage={setPage}\r\n                            pages={pages}\r\n                        />\r\n                        <Result countries={countries} players={players} />\r\n                    </div>\r\n                    <Map countries={countries} players={players} />\r\n                </div>\r\n            );\r\n        } else if (page === pages.END) {\r\n            return (\r\n                <div id=\"main-container\">\r\n                    <EndPage\r\n                        setMsg={setMsg}\r\n                        setPage={setPage}\r\n                        pages={pages}\r\n                        setCountries={setCountries}\r\n                    />\r\n                    <Map countries={countries} players={players} />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    const score = [countries.length, [...new Set(countries)].length];\r\n    return (\r\n        <div id=\"App\">\r\n            <header>🔗Country Chains🔗</header>\r\n            <Info msg={msg} score={score} />\r\n            {Main() /* reason for this: https://stackoverflow.com/a/65328486 */}\r\n            <footer>\r\n                <a\r\n                    href=\"https://github.com/mckwxp/country-chains\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                >\r\n                    Source code on GitHub\r\n                </a>\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}