{"version":3,"sources":["components/Info.js","components/Form.js","components/Result.js","components/StartPage.js","components/EndPage.js","components/Map.js","App.js","reportWebVitals.js","index.js"],"names":["Info","props","className","msg","score","Form","useState","name","setName","onSubmit","e","preventDefault","countryName","trim","addCountry","autoComplete","htmlFor","type","id","value","onChange","target","onClick","setPage","pages","END","Result","countries","slice","reverse","map","c","nanoid","StartPage","GAME","setMsg","EndPage","setCountries","Map","latlongData","require","findLatLong","x","countryArr","filter","country","toLowerCase","length","LocationMarker","i","CircleMarker","center","latitude","longitude","pathOptions","color","fillOpacity","radius","Tooltip","Lines","pos","Polyline","positions","MapContainer","zoom","TileLayer","attribution","url","App","myjson","find","first","second","searchResults","neighbours","includes","checkNeighbours","checkNeighbourExists","page","START","Set","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18803066.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Info(props) {\r\n    return (\r\n        <div className=\"Info\">\r\n            <div>{props.msg}</div>\r\n            <div>\r\n                <div className=\"Info1\">Countries: {props.score[0]}</div>\r\n                <div className=\"Info2\">Unique: {props.score[1]}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Info;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction Form(props) {\r\n    const [name, setName] = useState(\"\");\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        const countryName = name.trim();\r\n        if (countryName !== \"\") {\r\n            if (props.addCountry(countryName)) {\r\n                setName(\"\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleChange(e) {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    function handleClick() {\r\n        props.setPage(props.pages.END);\r\n    }\r\n\r\n    return (\r\n        <div className=\"Form\">\r\n            <form onSubmit={handleSubmit} autoComplete=\"off\">\r\n                <p className=\"label-wrapper\">\r\n                    <label htmlFor=\"country-input\" className=\"label\">\r\n                        Enter a country name:\r\n                    </label>\r\n                </p>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"country-input\"\r\n                    className=\"input\"\r\n                    name=\"text\"\r\n                    autoComplete=\"off\"\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                />\r\n                <button type=\"submit\" className=\"btn\">\r\n                    Chain it!\r\n                </button>\r\n            </form>\r\n            <div>\r\n                <button type=\"button\" className=\"btn\" onClick={handleClick}>\r\n                    Finish\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nfunction Result(props) {\r\n    // converts the country list to a list\r\n    // reverse the list so that most recent one is on top\r\n    const countries = props.countries\r\n        .slice(0)\r\n        .reverse()\r\n        .map((c) => {\r\n            return (\r\n                <li key={\"id-\" + nanoid()} className=\"country-name\">\r\n                    {c}\r\n                </li>\r\n            );\r\n        });\r\n\r\n    return (\r\n        <div className=\"Result\">\r\n            <ul>{countries}</ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Result;\r\n","import React from \"react\";\r\n\r\nfunction StartPage(props) {\r\n    function handleClick() {\r\n        props.setPage(props.pages.GAME);\r\n        props.setMsg(\"Let's begin!\");\r\n    }\r\n    return (\r\n        <div className=\"StartPage\">\r\n            <p>\r\n                In this game, you will create a chain of <br /> neighbouring\r\n                countries.\r\n            </p>\r\n            <button type=\"button\" className=\"btn\" onClick={handleClick}>\r\n                Play now!\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StartPage;\r\n","import React from \"react\";\r\n\r\nfunction EndPage(props) {\r\n    props.setMsg(\"Your score is:\");\r\n    function handleClick() {\r\n        props.setPage(props.pages.GAME);\r\n        props.setMsg(\"Let's begin!\");\r\n        props.setCountries([]);\r\n    }\r\n    return (\r\n        <div className=\"EndPage\">\r\n            <p>Thanks for playing!</p>\r\n            <button type=\"button\" className=\"btn\" onClick={handleClick}>\r\n                Play again!\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EndPage;\r\n","import React from \"react\";\r\nimport {\r\n    MapContainer,\r\n    TileLayer,\r\n    CircleMarker,\r\n    Tooltip,\r\n    Polyline,\r\n} from \"react-leaflet\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nfunction Map(props) {\r\n    let latlongData = require(\"../countries_latlong.json\");\r\n\r\n    function findLatLong(x) {\r\n        let countryArr = latlongData.filter(\r\n            (c) => c.country.toLowerCase() === x\r\n        );\r\n\r\n        return countryArr.length !== 0 ? countryArr[0] : null;\r\n    }\r\n\r\n    function LocationMarker() {\r\n        return props.countries.map((x, i) => {\r\n            let country = findLatLong(x);\r\n\r\n            return country ? (\r\n                <CircleMarker\r\n                    center={[country.latitude, country.longitude]}\r\n                    pathOptions={{\r\n                        color:\r\n                            i === props.countries.length - 1 ? \"blue\" : \"green\",\r\n                        fillOpacity: 1,\r\n                    }}\r\n                    radius={5}\r\n                    key={\"id-\" + nanoid()}\r\n                >\r\n                    <Tooltip>{country.country}</Tooltip>\r\n                </CircleMarker>\r\n            ) : null;\r\n        });\r\n    }\r\n\r\n    function Lines() {\r\n        let pos = props.countries\r\n            .map((x, i) => {\r\n                let country = findLatLong(x);\r\n\r\n                return country ? [country.latitude, country.longitude] : null;\r\n            })\r\n            .filter((c) => c !== null);\r\n\r\n        return pos.length !== 0 ? <Polyline positions={pos} /> : null;\r\n    }\r\n\r\n    return (\r\n        <MapContainer center={[25, 0]} zoom={2} className=\"Map\">\r\n            <TileLayer\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://c.tiles.wmflabs.org/osm-no-labels/{z}/{x}/{y}.png\"\r\n            />\r\n            <LocationMarker />\r\n            <Lines />\r\n        </MapContainer>\r\n    );\r\n}\r\n\r\nexport default Map;\r\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport Info from \"./components/Info.js\";\nimport Form from \"./components/Form.js\";\nimport Result from \"./components/Result.js\";\nimport StartPage from \"./components/StartPage.js\";\nimport EndPage from \"./components/EndPage.js\";\nimport Map from \"./components/Map.js\";\n\nfunction App() {\n    // Data for country neighbours\n    let myjson = require(\"./countries.json\");\n\n    // Checks if the second country is a neighbour of the first country\n    function checkNeighbours(first, second) {\n        const searchResults = myjson.find(\n            (c) => c.country.toLowerCase() === first.toLowerCase()\n        );\n        return searchResults\n            ? searchResults.neighbours\n                  .map((x) => x.toLowerCase())\n                  .includes(second.toLowerCase())\n            : false;\n    }\n\n    // Checks if a country has a neighbour\n    function checkNeighbourExists(country) {\n        const searchResults = myjson.find(\n            (c) => c.country.toLowerCase() === country.toLowerCase()\n        );\n        return searchResults.neighbours.length !== 0;\n    }\n\n    // Checks if a country is in the data object\n    function checkCountry(country) {\n        const searchResults = myjson.find(\n            (c) => c.country.toLowerCase() === country.toLowerCase()\n        );\n        return searchResults ? true : false;\n    }\n\n    // State for messsage panel\n    const [msg, setMsg] = useState(\"Welcome to the game!\");\n\n    // State for results panel; contains an array of countries\n    const [countries, setCountries] = useState([]);\n\n    // Core logic to check if the entered country is a neighbour of the most recent one\n    // Sets message panel and results panel accordingly\n    // Returns Boolean to indicate if country is successfully added to the array\n    function addCountry(countryName) {\n        // check validity of entered country name\n        if (!checkCountry(countryName)) {\n            setMsg(`${countryName} is not a valid country`);\n            return false;\n        } else {\n            // array already populated; not the first added country\n            if (countries.length > 0) {\n                if (\n                    checkNeighbours(\n                        countries[countries.length - 1],\n                        countryName\n                    )\n                ) {\n                    setCountries([...countries, countryName]);\n                    setMsg(\"Well done! Keep going!\");\n                    return true;\n                } else {\n                    setMsg(\n                        <>\n                            <span className=\"country-name\">{countryName} </span>{\" \"}\n                            is not a neighbour of{\" \"}\n                            <span className=\"country-name\">\n                                {countries[countries.length - 1]}\n                            </span>\n                        </>\n                    );\n                    return false;\n                }\n            } else {\n                // first added country\n                if (checkNeighbourExists(countryName)) {\n                    setCountries([countryName]);\n                    setMsg(\"Great start!\");\n                    return true;\n                } else {\n                    setMsg(\n                        \"This country does not have any neighbours. Please name another one.\"\n                    );\n                    return false;\n                }\n            }\n        }\n    }\n\n    const [page, setPage] = useState(0);\n    const pages = { START: 0, GAME: 1, END: 2 };\n\n    function Main() {\n        if (page === pages.START) {\n            return (\n                <StartPage setPage={setPage} pages={pages} setMsg={setMsg} />\n            );\n        } else if (page === pages.GAME) {\n            return (\n                <div className=\"main-container\">\n                    <div className=\"game\">\n                        <Form\n                            addCountry={addCountry}\n                            setPage={setPage}\n                            pages={pages}\n                        />\n                        <Result countries={countries} />\n                    </div>\n                    <Map countries={countries} />\n                </div>\n            );\n        } else if (page === pages.END) {\n            return (\n                <div className=\"main-container\">\n                    <EndPage\n                        setMsg={setMsg}\n                        setPage={setPage}\n                        pages={pages}\n                        setCountries={setCountries}\n                    />\n                    <Map countries={countries} />\n                </div>\n            );\n        }\n    }\n\n    const score = [countries.length, [...new Set(countries)].length];\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">🔗Country Chains🔗</header>\n            <Info msg={msg} score={score} />\n            {Main() /* reason for this: https://stackoverflow.com/a/65328486 */}\n            <footer className=\"App-footer\">\n                <a\n                    href=\"https://github.com/mckwxp/country-chains\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Source code on GitHub\n                </a>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}