{"version":3,"sources":["components/Info.js","components/Form.js","components/Result.js","components/StartPage.js","components/EndPage.js","components/Map.js","App.js","reportWebVitals.js","index.js"],"names":["Info","props","className","msg","score","Form","useState","name","setName","onSubmit","e","preventDefault","countryName","trim","addCountry","autoComplete","htmlFor","type","id","value","onChange","target","onClick","setPage","pages","END","Result","countries","slice","reverse","map","c","nanoid","StartPage","GAME","setMsg","EndPage","setCountries","Map","latlongData","require","findLatLong","x","countryArr","filter","country","toLowerCase","length","LocationMarker","i","CircleMarker","center","latitude","longitude","pathOptions","color","fillOpacity","radius","Tooltip","Lines","pos","Polyline","positions","MapContainer","zoom","TileLayer","attribution","url","App","myjson","synonyms","searchResults","find","checkCountry","includes","checkSynonyms","first","second","neighbours","checkNeighbours","checkNeighbourExists","page","START","Set","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50287c7b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Info(props) {\r\n    return (\r\n        <div className=\"Info\">\r\n            <div>{props.msg}</div>\r\n            <div>\r\n                <div className=\"Info1\">Countries: {props.score[0]}</div>\r\n                <div className=\"Info2\">Unique: {props.score[1]}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Info;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction Form(props) {\r\n    const [name, setName] = useState(\"\");\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        const countryName = name.trim();\r\n        if (countryName !== \"\") {\r\n            if (props.addCountry(countryName)) {\r\n                setName(\"\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleChange(e) {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    function handleClick() {\r\n        props.setPage(props.pages.END);\r\n    }\r\n\r\n    return (\r\n        <div className=\"Form\">\r\n            <form onSubmit={handleSubmit} autoComplete=\"off\">\r\n                <p className=\"label-wrapper\">\r\n                    <label htmlFor=\"country-input\" className=\"label\">\r\n                        Enter a country name:\r\n                    </label>\r\n                </p>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"country-input\"\r\n                    className=\"input\"\r\n                    name=\"text\"\r\n                    autoComplete=\"off\"\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                />\r\n                <button type=\"submit\" className=\"btn\">\r\n                    Chain it!\r\n                </button>\r\n            </form>\r\n            <div>\r\n                <button type=\"button\" className=\"btn\" onClick={handleClick}>\r\n                    Finish\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nfunction Result(props) {\r\n    // converts the country list to a list\r\n    // reverse the list so that most recent one is on top\r\n    const countries = props.countries\r\n        .slice(0)\r\n        .reverse()\r\n        .map((c) => {\r\n            return (\r\n                <li key={\"id-\" + nanoid()} className=\"country-name\">\r\n                    {c}\r\n                </li>\r\n            );\r\n        });\r\n\r\n    return (\r\n        <div className=\"Result\">\r\n            <ul>{countries}</ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Result;\r\n","import React from \"react\";\r\n\r\nfunction StartPage(props) {\r\n    function handleClick() {\r\n        props.setPage(props.pages.GAME);\r\n        props.setMsg(\"Let's begin!\");\r\n    }\r\n    return (\r\n        <div className=\"StartPage\">\r\n            <p>\r\n                In this game, you will create a chain of <br /> neighbouring\r\n                countries.\r\n            </p>\r\n            <button type=\"button\" className=\"btn\" onClick={handleClick}>\r\n                Play now!\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StartPage;\r\n","import React from \"react\";\r\n\r\nfunction EndPage(props) {\r\n    props.setMsg(\"Your score is:\");\r\n    function handleClick() {\r\n        props.setPage(props.pages.GAME);\r\n        props.setMsg(\"Let's begin!\");\r\n        props.setCountries([]);\r\n    }\r\n    return (\r\n        <div className=\"EndPage\">\r\n            <p>Thanks for playing!</p>\r\n            <button type=\"button\" className=\"btn\" onClick={handleClick}>\r\n                Play again!\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EndPage;\r\n","import React from \"react\";\r\nimport {\r\n    MapContainer,\r\n    TileLayer,\r\n    CircleMarker,\r\n    Tooltip,\r\n    Polyline,\r\n} from \"react-leaflet\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nfunction Map(props) {\r\n    const latlongData = require(\"../countries_latlong.json\");\r\n\r\n    function findLatLong(x) {\r\n        // get lat/long data from country name\r\n        let countryArr = latlongData.filter(\r\n            (c) => c.country.toLowerCase() === x.toLowerCase()\r\n        );\r\n\r\n        return countryArr.length !== 0 ? countryArr[0] : null;\r\n    }\r\n\r\n    function LocationMarker() {\r\n        // add circle markers for each country\r\n        return props.countries.map((x, i) => {\r\n            let country = findLatLong(x);\r\n\r\n            return country ? (\r\n                <CircleMarker\r\n                    center={[country.latitude, country.longitude]}\r\n                    pathOptions={{\r\n                        color:\r\n                            i === props.countries.length - 1 ? \"blue\" : \"green\",\r\n                        fillOpacity: 1,\r\n                    }}\r\n                    radius={5}\r\n                    key={\"id-\" + nanoid()}\r\n                >\r\n                    <Tooltip>{country.country}</Tooltip>\r\n                </CircleMarker>\r\n            ) : null;\r\n        });\r\n    }\r\n\r\n    function Lines() {\r\n        // add lines to connect the circle markers\r\n        let pos = props.countries\r\n            .map((x, i) => {\r\n                let country = findLatLong(x);\r\n\r\n                return country ? [country.latitude, country.longitude] : null;\r\n            })\r\n            .filter((c) => c !== null);\r\n\r\n        return pos.length !== 0 ? <Polyline positions={pos} /> : null;\r\n    }\r\n\r\n    return (\r\n        <MapContainer center={[25, 0]} zoom={2} className=\"Map\">\r\n            <TileLayer\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://c.tiles.wmflabs.org/osm-no-labels/{z}/{x}/{y}.png\"\r\n            />\r\n            <LocationMarker />\r\n            <Lines />\r\n        </MapContainer>\r\n    );\r\n}\r\n\r\nexport default Map;\r\n","import \"./App.css\";\r\nimport React, { useState } from \"react\";\r\nimport Info from \"./components/Info.js\";\r\nimport Form from \"./components/Form.js\";\r\nimport Result from \"./components/Result.js\";\r\nimport StartPage from \"./components/StartPage.js\";\r\nimport EndPage from \"./components/EndPage.js\";\r\nimport Map from \"./components/Map.js\";\r\n\r\nfunction App() {\r\n    // Data for country neighbours\r\n    const myjson = require(\"./countries.json\");\r\n\r\n    // Checks if the second country is a neighbour of the first country\r\n    function checkNeighbours(first, second) {\r\n        const searchResults = myjson.find(\r\n            (c) => c.country.toLowerCase() === first.toLowerCase()\r\n        );\r\n\r\n        if (searchResults) {\r\n            let filteredNeighbours = searchResults.neighbours.filter(\r\n                (x) => x.toLowerCase() === second.toLowerCase()\r\n            );\r\n            if (filteredNeighbours.length !== 0) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Checks if a country has a neighbour\r\n    function checkNeighbourExists(country) {\r\n        const searchResults = myjson.find(\r\n            (c) => c.country.toLowerCase() === country.toLowerCase()\r\n        );\r\n        return searchResults ? searchResults.neighbours.length !== 0 : false;\r\n    }\r\n\r\n    // Checks if a country is in the data object\r\n    function checkCountry(country) {\r\n        const searchResults = myjson.find(\r\n            (c) => c.country.toLowerCase() === country.toLowerCase()\r\n        );\r\n        return searchResults ? searchResults.country : false;\r\n    }\r\n\r\n    // Data for country name synonyms\r\n    const synonyms = require(\"./countries_synonyms.json\");\r\n\r\n    // Checks for synonym of country names\r\n    function checkSynonyms(country) {\r\n        const searchResults = synonyms.find((c) =>\r\n            c.synonyms\r\n                .map((x) => x.toLowerCase())\r\n                .includes(country.toLowerCase())\r\n        );\r\n        return searchResults ? searchResults.country : country;\r\n    }\r\n\r\n    // State for messsage panel\r\n    const [msg, setMsg] = useState(\"Welcome to the game!\");\r\n\r\n    // State for results panel; contains an array of countries\r\n    const [countries, setCountries] = useState([]);\r\n\r\n    // Core logic to check if the entered country is a neighbour of the most recent one\r\n    // Sets message panel and results panel accordingly\r\n    // Returns Boolean to indicate if country is successfully added to the array\r\n    function addCountry(countryName) {\r\n        // check for synonyms and coutnry name validity\r\n        countryName = checkSynonyms(countryName);\r\n        countryName = checkCountry(countryName);\r\n\r\n        if (!countryName) {\r\n            setMsg(`This is not a valid country.`);\r\n            return false;\r\n        } else {\r\n            // array already populated; not the first added country\r\n            if (countries.length > 0) {\r\n                if (\r\n                    checkNeighbours(\r\n                        countries[countries.length - 1],\r\n                        countryName\r\n                    )\r\n                ) {\r\n                    setCountries([...countries, countryName]);\r\n                    setMsg(\"Well done! Keep going!\");\r\n                    return true;\r\n                } else {\r\n                    setMsg(\r\n                        `${countryName} is not a neighbour of ${\r\n                            countries[countries.length - 1]\r\n                        }.`\r\n                    );\r\n                    return false;\r\n                }\r\n            } else {\r\n                // first added country\r\n                if (checkNeighbourExists(countryName)) {\r\n                    setCountries([countryName]);\r\n                    setMsg(\"Great start!\");\r\n                    return true;\r\n                } else {\r\n                    setMsg(\r\n                        \"This country does not have any neighbours. Please name another one.\"\r\n                    );\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const [page, setPage] = useState(0);\r\n    const pages = { START: 0, GAME: 1, END: 2 };\r\n\r\n    function Main() {\r\n        if (page === pages.START) {\r\n            return (\r\n                <StartPage setPage={setPage} pages={pages} setMsg={setMsg} />\r\n            );\r\n        } else if (page === pages.GAME) {\r\n            return (\r\n                <div className=\"main-container\">\r\n                    <div className=\"game\">\r\n                        <Form\r\n                            addCountry={addCountry}\r\n                            setPage={setPage}\r\n                            pages={pages}\r\n                        />\r\n                        <Result countries={countries} />\r\n                    </div>\r\n                    <Map countries={countries} />\r\n                </div>\r\n            );\r\n        } else if (page === pages.END) {\r\n            return (\r\n                <div className=\"main-container\">\r\n                    <EndPage\r\n                        setMsg={setMsg}\r\n                        setPage={setPage}\r\n                        pages={pages}\r\n                        setCountries={setCountries}\r\n                    />\r\n                    <Map countries={countries} />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    const score = [countries.length, [...new Set(countries)].length];\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">🔗Country Chains🔗</header>\r\n            <Info msg={msg} score={score} />\r\n            {Main() /* reason for this: https://stackoverflow.com/a/65328486 */}\r\n            <footer className=\"App-footer\">\r\n                <a\r\n                    href=\"https://github.com/mckwxp/country-chains\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                >\r\n                    Source code on GitHub\r\n                </a>\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}