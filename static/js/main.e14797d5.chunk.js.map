{"version":3,"sources":["components/Info.js","components/Form.js","components/Result.js","components/StartPage.js","components/EndPage.js","components/Map.js","App.js","reportWebVitals.js","index.js"],"names":["Info","props","id","msg","className","score","Form","useState","name","setName","onSubmit","e","preventDefault","countryName","trim","addCountry","autoComplete","type","value","onChange","target","onClick","setPage","pages","END","setMsg","Result","countries","map","c","i","players","slice","reverse","StartPage","onChangePlayers","setPlayers","parseInt","onChangeMode","setMode","GAME","checked","mode","EndPage","setCountries","Map","latlongData","require","findLatLong","x","countryArr","filter","country","toLowerCase","length","LocationMarker","colors","CircleMarker","center","latitude","longitude","pathOptions","color","fillOpacity","radius","Tooltip","Lines","pos","Polyline","positions","CurrentLocation","LayersControl","position","collapsed","Overlay","Marker","MapContainer","zoom","BaseLayer","TileLayer","attribution","url","App","myjson","synonyms","searchResults","find","checkCountry","includes","checkSynonyms","first","second","neighbours","checkNeighbours","checkNeighbourExists","page","START","Set","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e14797d5.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction Info(props) {\n    return (\n        <div id=\"Info\">\n            <div>{props.msg}</div>\n            <div>\n                <div className=\"score\">Countries: {props.score[0]}</div>\n                <div className=\"score\">Unique: {props.score[1]}</div>\n            </div>\n        </div>\n    );\n}\n\nInfo.propTypes = {\n    msg: PropTypes.string,\n    score: PropTypes.array,\n};\n\nexport default Info;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction Form(props) {\n    const [name, setName] = useState(\"\");\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        const countryName = name.trim();\n        if (countryName !== \"\") {\n            if (props.addCountry(countryName)) {\n                setName(\"\");\n            }\n        }\n    }\n\n    function handleChange(e) {\n        setName(e.target.value);\n    }\n\n    function handleClick() {\n        props.setPage(props.pages.END);\n        props.setMsg(\"Your score is:\");\n    }\n\n    return (\n        <div id=\"Form\">\n            <form onSubmit={handleSubmit} autoComplete=\"off\">\n                <p>Enter a country name:</p>\n                <input\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    value={name}\n                    onChange={handleChange}\n                />\n                <button type=\"submit\">Chain it!</button>\n            </form>\n            <div>\n                <button type=\"button\" onClick={handleClick}>\n                    Finish\n                </button>\n            </div>\n        </div>\n    );\n}\n\nForm.propTypes = {\n    addCountry: PropTypes.func,\n    setPage: PropTypes.func,\n    setMsg: PropTypes.func,\n    pages: PropTypes.object,\n};\n\nexport default Form;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction Result(props) {\n    // converts the country list to a list\n    // reverse the list so that most recent one is on top\n    const countries = props.countries\n        .map((c, i) => {\n            return (\n                <li\n                    key={\"country\" + i}\n                    className={\"player\" + (i % props.players)}\n                >\n                    {c}\n                </li>\n            );\n        })\n        .slice(0)\n        .reverse();\n\n    return (\n        <div id=\"Result\">\n            <ul>{countries}</ul>\n        </div>\n    );\n}\n\nResult.propTypes = {\n    countries: PropTypes.array,\n    players: PropTypes.number,\n};\n\nexport default Result;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction StartPage(props) {\n    function handleSubmit(e) {\n        e.preventDefault();\n        props.setPage(props.pages.GAME);\n        props.setMsg(\"Let's begin!\");\n    }\n\n    function onChangePlayers(e) {\n        props.setPlayers(parseInt(e.target.value));\n    }\n\n    function onChangeMode(e) {\n        props.setMode(e.target.value);\n    }\n\n    return (\n        <div id=\"StartPage\">\n            <br />\n            In this game, you will create a chain of <br /> neighbouring\n            countries.\n            <form onSubmit={handleSubmit}>\n                <br />\n                Select the number of players:\n                <div>\n                    <label>\n                        <input\n                            type=\"radio\"\n                            id=\"numPlayers1\"\n                            value={1}\n                            checked={props.players === 1}\n                            onChange={onChangePlayers}\n                        />\n                        1\n                    </label>\n                    <label>\n                        <input\n                            type=\"radio\"\n                            id=\"numPlayers2\"\n                            value={2}\n                            checked={props.players === 2}\n                            onChange={onChangePlayers}\n                        />\n                        2\n                    </label>\n                    <label>\n                        <input\n                            type=\"radio\"\n                            id=\"numPlayers3\"\n                            value={3}\n                            checked={props.players === 3}\n                            onChange={onChangePlayers}\n                        />\n                        3\n                    </label>\n                    <label>\n                        <input\n                            type=\"radio\"\n                            id=\"numPlayers4\"\n                            value={4}\n                            checked={props.players === 4}\n                            onChange={onChangePlayers}\n                        />\n                        4\n                    </label>\n                </div>\n                <br />\n                Select the game mode:\n                <div>\n                    <label>\n                        <input\n                            type=\"radio\"\n                            id=\"mode1\"\n                            value=\"land\"\n                            checked={props.mode === \"land\"}\n                            onChange={onChangeMode}\n                        />\n                        Land\n                    </label>\n                    <label>\n                        <input\n                            type=\"radio\"\n                            id=\"mode2\"\n                            value=\"maritime\"\n                            checked={props.mode === \"maritime\"}\n                            onChange={onChangeMode}\n                        />\n                        Land and Maritime\n                    </label>\n                </div>\n                <br />\n                <button type=\"submit\">Play now!</button>\n            </form>\n        </div>\n    );\n}\n\nStartPage.propTypes = {\n    setPage: PropTypes.func,\n    pages: PropTypes.object,\n    setMsg: PropTypes.func,\n    players: PropTypes.number,\n    setPlayers: PropTypes.func,\n    mode: PropTypes.string,\n    setMode: PropTypes.func,\n};\n\nexport default StartPage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction EndPage(props) {\n    function handleClick() {\n        props.setPage(props.pages.GAME);\n        props.setMsg(\"Let's begin!\");\n        props.setCountries([]);\n    }\n    return (\n        <div id=\"EndPage\">\n            <p>Thanks for playing!</p>\n            <button type=\"button\" onClick={handleClick}>\n                Play again!\n            </button>\n        </div>\n    );\n}\n\nEndPage.propTypes = {\n    setMsg: PropTypes.func,\n    setPage: PropTypes.func,\n    pages: PropTypes.object,\n    setCountries: PropTypes.func,\n};\n\nexport default EndPage;\n","import React from \"react\";\nimport {\n    MapContainer,\n    TileLayer,\n    CircleMarker,\n    Tooltip,\n    Polyline,\n    Marker,\n    LayersControl,\n} from \"react-leaflet\";\nimport PropTypes from \"prop-types\";\n\nfunction Map(props) {\n    const latlongData = require(\"../countries_latlong.json\");\n\n    function findLatLong(x) {\n        // get lat/long data from country name\n        let countryArr = latlongData.filter(\n            (c) => c.country.toLowerCase() === x.toLowerCase()\n        );\n\n        return countryArr.length !== 0 ? countryArr[0] : null;\n    }\n\n    function LocationMarker() {\n        let colors = [\"green\", \"red\", \"blue\", \"orange\"];\n\n        // add circle markers for each country\n        return props.countries.map((x, i) => {\n            let country = findLatLong(x);\n\n            return country ? (\n                <CircleMarker\n                    center={[country.latitude, country.longitude]}\n                    pathOptions={{\n                        color: colors[i % props.players],\n                        fillOpacity: 1,\n                    }}\n                    radius={5}\n                    key={\"circleMarker\" + i}\n                >\n                    <Tooltip>{country.country}</Tooltip>\n                </CircleMarker>\n            ) : null;\n        });\n    }\n\n    function Lines() {\n        // add lines to connect the circle markers\n        let pos = props.countries\n            .map((x, i) => {\n                let country = findLatLong(x);\n\n                return country ? [country.latitude, country.longitude] : null;\n            })\n            .filter((c) => c !== null);\n\n        return pos.length !== 0 ? <Polyline positions={pos} /> : null;\n    }\n\n    function CurrentLocation() {\n        if (props.countries.length > 0) {\n            let country = findLatLong(\n                props.countries[props.countries.length - 1]\n            );\n            if (country) {\n                return (\n                    <LayersControl position=\"topright\" collapsed={false}>\n                        <LayersControl.Overlay\n                            name=\"Current Location\"\n                            checked={true}\n                        >\n                            <Marker\n                                position={[country.latitude, country.longitude]}\n                            ></Marker>\n                        </LayersControl.Overlay>\n                    </LayersControl>\n                );\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    return (\n        <MapContainer center={[25, 0]} zoom={2} id=\"Map\">\n            <LayersControl position=\"topright\" collapsed={false}>\n                <LayersControl.BaseLayer checked name=\"Map without labels\">\n                    <TileLayer\n                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                        url=\"https://c.tiles.wmflabs.org/osm-no-labels/{z}/{x}/{y}.png\"\n                    />\n                </LayersControl.BaseLayer>\n                <LayersControl.BaseLayer name=\"Map with labels\">\n                    <TileLayer\n                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                        url=\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    />\n                </LayersControl.BaseLayer>\n            </LayersControl>\n            <LocationMarker />\n            <Lines />\n            <CurrentLocation />\n        </MapContainer>\n    );\n}\n\nMap.propTypes = {\n    countries: PropTypes.array,\n    players: PropTypes.number,\n};\n\nexport default Map;\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport Info from \"./components/Info.js\";\nimport Form from \"./components/Form.js\";\nimport Result from \"./components/Result.js\";\nimport StartPage from \"./components/StartPage.js\";\nimport EndPage from \"./components/EndPage.js\";\nimport Map from \"./components/Map.js\";\n\nfunction App() {\n    const [mode, setMode] = useState(\"land\");\n\n    // Data for country neighbours\n    const myjson =\n        mode === \"land\"\n            ? require(\"./countries_land.json\")\n            : require(\"./countries_maritime.json\");\n\n    // Checks if the second country is a neighbour of the first country\n    function checkNeighbours(first, second) {\n        const searchResults = myjson.find(\n            (c) => c.country.toLowerCase() === first.toLowerCase()\n        );\n\n        if (searchResults) {\n            let filteredNeighbours = searchResults.neighbours.filter(\n                (x) => x.toLowerCase() === second.toLowerCase()\n            );\n            if (filteredNeighbours.length !== 0) {\n                return true;\n            }\n        }\n    }\n\n    // Checks if a country has a neighbour\n    function checkNeighbourExists(country) {\n        const searchResults = myjson.find(\n            (c) => c.country.toLowerCase() === country.toLowerCase()\n        );\n        return searchResults ? searchResults.neighbours.length !== 0 : false;\n    }\n\n    // Checks if a country is in the data object\n    function checkCountry(country) {\n        const searchResults = myjson.find(\n            (c) => c.country.toLowerCase() === country.toLowerCase()\n        );\n        return searchResults ? searchResults.country : false;\n    }\n\n    // Data for country name synonyms\n    const synonyms = require(\"./countries_synonyms.json\");\n\n    // Checks for synonym of country names\n    function checkSynonyms(country) {\n        const searchResults = synonyms.find((c) =>\n            c.synonyms\n                .map((x) => x.toLowerCase())\n                .includes(country.toLowerCase())\n        );\n        return searchResults ? searchResults.country : country;\n    }\n\n    // State for messsage panel\n    const [msg, setMsg] = useState(\"Welcome to the game!\");\n\n    // State for results panel; contains an array of countries\n    const [countries, setCountries] = useState([]);\n\n    // State for number of players\n    const [players, setPlayers] = useState(1);\n\n    // Core logic to check if the entered country is a neighbour of the most recent one\n    // Sets message panel and results panel accordingly\n    // Returns Boolean to indicate if country is successfully added to the array\n    function addCountry(countryName) {\n        // check for synonyms and coutnry name validity\n        countryName = checkSynonyms(countryName);\n        countryName = checkCountry(countryName);\n\n        if (!countryName) {\n            setMsg(`This is not a valid country.`);\n            return false;\n        } else {\n            // array already populated; not the first added country\n            if (countries.length > 0) {\n                if (\n                    checkNeighbours(\n                        countries[countries.length - 1],\n                        countryName\n                    )\n                ) {\n                    setCountries([...countries, countryName]);\n                    setMsg(\"Well done! Keep going!\");\n                    return true;\n                } else {\n                    setMsg(\n                        `${countryName} is not a neighbour of ${\n                            countries[countries.length - 1]\n                        }.`\n                    );\n                    return false;\n                }\n            } else {\n                // first added country\n                if (checkNeighbourExists(countryName)) {\n                    setCountries([countryName]);\n                    setMsg(\"Great start!\");\n                    return true;\n                } else {\n                    setMsg(\n                        \"This country does not have any neighbours. Please name another one.\"\n                    );\n                    return false;\n                }\n            }\n        }\n    }\n\n    const [page, setPage] = useState(0);\n    const pages = { START: 0, GAME: 1, END: 2 };\n\n    function Main() {\n        if (page === pages.START) {\n            return (\n                <StartPage\n                    setPage={setPage}\n                    pages={pages}\n                    setMsg={setMsg}\n                    players={players}\n                    setPlayers={setPlayers}\n                    mode={mode}\n                    setMode={setMode}\n                />\n            );\n        } else if (page === pages.GAME) {\n            return (\n                <div id=\"main-container\">\n                    <div id=\"game\">\n                        <Form\n                            addCountry={addCountry}\n                            setPage={setPage}\n                            setMsg={setMsg}\n                            pages={pages}\n                        />\n                        <Result countries={countries} players={players} />\n                    </div>\n                    <Map countries={countries} players={players} />\n                </div>\n            );\n        } else if (page === pages.END) {\n            return (\n                <div id=\"main-container\">\n                    <EndPage\n                        setMsg={setMsg}\n                        setPage={setPage}\n                        pages={pages}\n                        setCountries={setCountries}\n                    />\n                    <Map countries={countries} players={players} />\n                </div>\n            );\n        }\n    }\n\n    const score = [countries.length, [...new Set(countries)].length];\n    return (\n        <div id=\"App\">\n            <header>🔗Country Chains🔗</header>\n            <Info msg={msg} score={score} />\n            {Main() /* reason for this: https://stackoverflow.com/a/65328486 */}\n            <footer>\n                <a\n                    href=\"https://github.com/mckwxp/country-chains\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Source code on GitHub\n                </a>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}