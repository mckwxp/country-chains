{"version":3,"sources":["components/Info.js","components/Form.js","components/Result.js","App.js","reportWebVitals.js","index.js"],"names":["Info","props","className","msg","score","Form","useState","name","setName","onSubmit","e","preventDefault","countryName","trim","addCountryFunc","autoComplete","htmlFor","type","id","value","onChange","target","Result","countries","slice","reverse","map","c","nanoid","App","myjson","require","setMsg","setCountries","length","Set","country","find","toLowerCase","first","second","searchResults","neighbours","x","includes","checkNeighbours","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8leAceA,MAZf,SAAcC,GACV,OACI,sBAAKC,UAAU,OAAf,UACI,8BAAMD,EAAME,MACZ,gCACI,sBAAKD,UAAU,QAAf,wBAAmCD,EAAMG,MAAM,MAC/C,sBAAKF,UAAU,QAAf,qBAAgCD,EAAMG,MAAM,aCoC7CC,MA1Cf,SAAcJ,GACV,MAAwBK,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAgBA,OACI,qBAAKN,UAAU,OAAf,SACI,uBAAMO,SAhBd,SAAsBC,GAClBA,EAAEC,iBACF,IAAMC,EAAcL,EAAKM,OACL,KAAhBD,GACIX,EAAMa,eAAeF,IACrBJ,EAAQ,KAWkBO,aAAa,MAA3C,UACI,oBAAIb,UAAU,gBAAd,SACI,uBAAOc,QAAQ,gBAAgBd,UAAU,QAAzC,qCAIJ,uBACIe,KAAK,OACLC,GAAG,gBACHhB,UAAU,QACVK,KAAK,OACLQ,aAAa,MACbI,MAAOZ,EACPa,SAnBhB,SAAsBV,GAClBF,EAAQE,EAAEW,OAAOF,UAoBT,wBAAQF,KAAK,SAASf,UAAU,MAAhC,6B,OChBDoB,MAjBf,SAAgBrB,GAGZ,IAAMsB,EAAYtB,EAAMsB,UACnBC,MAAM,GACNC,UACAC,KAAI,SAACC,GACF,OAAO,6BAA4BA,GAAnB,MAAQC,kBAGhC,OACI,qBAAK1B,UAAU,SAAf,SACI,6BAAKqB,OC4EFM,MArFf,WAEI,IAAIC,EAASC,EAAQ,IAuBrB,EAAsBzB,mBAAS,wBAA/B,mBAAOH,EAAP,KAAY6B,EAAZ,KAGA,EAAkC1B,mBAAS,IAA3C,mBAAOiB,EAAP,KAAkBU,EAAlB,KAuCA,OACI,sBAAK/B,UAAU,MAAf,UACI,wBAAQA,UAAU,aAAlB,oDACA,cAAC,EAAD,CACIC,IAAKA,EACLC,MAAO,CAACmB,EAAUW,OAAQ,YAAI,IAAIC,IAAIZ,IAAYW,UAEtD,cAAC,EAAD,CAAMpB,eAzCd,SAAoBF,GAEhB,OAlBkBwB,EAkBAxB,EAjBIkB,EAAOO,MACzB,SAACV,GAAD,OAAOA,EAAES,QAAQE,gBAAkBF,EAAQE,iBAqBvCf,EAAUW,OAAS,EAnC/B,SAAyBK,EAAOC,GAC5B,IAAMC,EAAgBX,EAAOO,MACzB,SAACV,GAAD,OAAOA,EAAES,QAAQE,gBAAkBC,EAAMD,iBAE7C,QAAOG,GACDA,EAAcC,WACThB,KAAI,SAACiB,GAAD,OAAOA,EAAEL,iBACbM,SAASJ,EAAOF,eA8BfO,CACItB,EAAUA,EAAUW,OAAS,GAC7BtB,IAGJqB,EAAa,GAAD,mBAAKV,GAAL,CAAgBX,KAC5BoB,EAAO,2BACA,IAEPA,EAAO,GAAD,OACCpB,EADD,kCAEEW,EAAUA,EAAUW,OAAS,MAG9B,IAIXD,EAAa,CAACrB,IACdoB,EAAO,6BACA,IA1BXA,EAAO,GAAD,OAAIpB,EAAJ,6BACC,GApBf,IAAsBwB,KA0Dd,cAAC,EAAD,CAAQb,UAAWA,IACnB,wBAAQrB,UAAU,aAAlB,SACI,mBAAG4C,KAAK,2CAAR,yCCvEDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f3dadba6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Info(props) {\r\n    return (\r\n        <div className=\"Info\">\r\n            <div>{props.msg}</div>\r\n            <div>\r\n                <div className=\"Info1\">Countries: {props.score[0]}</div>\r\n                <div className=\"Info2\">Unique: {props.score[1]}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Info;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction Form(props) {\r\n    const [name, setName] = useState(\"\");\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        const countryName = name.trim();\r\n        if (countryName !== \"\") {\r\n            if (props.addCountryFunc(countryName)) {\r\n                setName(\"\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleChange(e) {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"Form\">\r\n            <form onSubmit={handleSubmit} autoComplete=\"off\">\r\n                <h2 className=\"label-wrapper\">\r\n                    <label htmlFor=\"country-input\" className=\"label\">\r\n                        Enter a country name:\r\n                    </label>\r\n                </h2>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"country-input\"\r\n                    className=\"input\"\r\n                    name=\"text\"\r\n                    autoComplete=\"off\"\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                />\r\n                <button type=\"submit\" className=\"btn\">\r\n                    Chain it!\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form;\r\n","import React, { useState } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nfunction Result(props) {\r\n    // converts the country list to a list\r\n    // reverse the list so that most recent one is on top\r\n    const countries = props.countries\r\n        .slice(0)\r\n        .reverse()\r\n        .map((c) => {\r\n            return <li key={\"id-\" + nanoid()}>{c}</li>;\r\n        });\r\n\r\n    return (\r\n        <div className=\"Result\">\r\n            <ul>{countries}</ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Result;\r\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport Info from \"./components/Info.js\";\nimport Form from \"./components/Form.js\";\nimport Result from \"./components/Result.js\";\n\nfunction App() {\n    // Data for country neighbours\n    let myjson = require(\"./countries.json\");\n\n    // Checks if the second country is a neighbour of the first country\n    function checkNeighbours(first, second) {\n        const searchResults = myjson.find(\n            (c) => c.country.toLowerCase() === first.toLowerCase()\n        );\n        return searchResults\n            ? searchResults.neighbours\n                  .map((x) => x.toLowerCase())\n                  .includes(second.toLowerCase())\n            : false;\n    }\n\n    // Checks if a country is in the data object\n    function checkCountry(country) {\n        const searchResults = myjson.find(\n            (c) => c.country.toLowerCase() === country.toLowerCase()\n        );\n        return searchResults ? true : false;\n    }\n\n    // State for messsage panel\n    const [msg, setMsg] = useState(\"Welcome to the game!\");\n\n    // State for results panel; contains an array of countries\n    const [countries, setCountries] = useState([]);\n\n    // Core logic to check if the entered country is a neighbour of the most recent one\n    // Sets message panel and results panel accordingly\n    // Returns Boolean to indicate if country is successfully added to the array\n    function addCountry(countryName) {\n        // check validity of entered country name\n        if (!checkCountry(countryName)) {\n            setMsg(`${countryName} is not a valid country`);\n            return false;\n        } else {\n            // array already populated; not the first added country\n            if (countries.length > 0) {\n                if (\n                    checkNeighbours(\n                        countries[countries.length - 1],\n                        countryName\n                    )\n                ) {\n                    setCountries([...countries, countryName]);\n                    setMsg(\"Well done! Keep going!\");\n                    return true;\n                } else {\n                    setMsg(\n                        `${countryName} is not a neighbour of ${\n                            countries[countries.length - 1]\n                        }`\n                    );\n                    return false;\n                }\n            } else {\n                // first added country\n                setCountries([countryName]);\n                setMsg(\"Great start to the game!\");\n                return true;\n            }\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">ðŸ”—Country ChainsðŸ”—</header>\n            <Info\n                msg={msg}\n                score={[countries.length, [...new Set(countries)].length]}\n            />\n            <Form addCountryFunc={addCountry} />\n            <Result countries={countries} />\n            <footer className=\"App-footer\">\n                <a href=\"https://github.com/mckwxp/country-chains\">\n                    Source code on GitHub\n                </a>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}